# Generated by Django 4.2.7 on 2025-08-18 18:49

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="AttributeValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.CharField(max_length=255)),
                ("display_name", models.CharField(blank=True, max_length=255)),
                ("color_code", models.CharField(blank=True, max_length=7)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="attribute_values/"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("extra_data", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "inventory_attribute_values",
                "ordering": ["attribute__sort_order", "sort_order", "display_name"],
            },
        ),
        migrations.CreateModel(
            name="Batch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("batch_number", models.CharField(max_length=50)),
                ("lot_number", models.CharField(blank=True, max_length=50)),
                ("manufacture_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("best_before_date", models.DateField(blank=True, null=True)),
                (
                    "quality_grade",
                    models.CharField(
                        choices=[
                            ("A", "Grade A"),
                            ("B", "Grade B"),
                            ("C", "Grade C"),
                            ("D", "Grade D"),
                        ],
                        default="A",
                        max_length=1,
                    ),
                ),
                ("quality_notes", models.TextField(blank=True)),
                ("quality_test_results", models.JSONField(blank=True, default=dict)),
                (
                    "initial_quantity",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "current_quantity",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "reserved_quantity",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "landed_cost_per_unit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("purchase_order_number", models.CharField(blank=True, max_length=50)),
                ("invoice_number", models.CharField(blank=True, max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("QUARANTINED", "Quarantined"),
                            ("EXPIRED", "Expired"),
                            ("RECALLED", "Recalled"),
                            ("CONSUMED", "Fully Consumed"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "received_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("quarantine_reason", models.TextField(blank=True)),
                ("recall_reason", models.TextField(blank=True)),
                ("certifications", models.JSONField(blank=True, default=list)),
                ("compliance_data", models.JSONField(blank=True, default=dict)),
                ("storage_conditions", models.TextField(blank=True)),
                ("handling_instructions", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "db_table": "inventory_batches",
                "ordering": ["expiry_date", "received_date"],
            },
        ),
        migrations.CreateModel(
            name="Brand",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("manufacturer", models.BooleanField(default=False)),
                ("country_of_origin", models.CharField(blank=True, max_length=100)),
                (
                    "established_year",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("certifications", models.JSONField(blank=True, default=list)),
                (
                    "quality_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_preferred", models.BooleanField(default=False)),
                ("logo", models.ImageField(blank=True, null=True, upload_to="brands/")),
                ("logo_url", models.URLField(blank=True)),
                ("brand_colors", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_brands",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("tax_category", models.CharField(blank=True, max_length=50)),
                ("hsn_code", models.CharField(blank=True, max_length=20)),
                ("required_attributes", models.JSONField(blank=True, default=list)),
                ("optional_attributes", models.JSONField(blank=True, default=list)),
                ("seo_title", models.CharField(blank=True, max_length=255)),
                ("seo_description", models.TextField(blank=True)),
                ("seo_keywords", models.TextField(blank=True)),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="categories/"),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
                "db_table": "inventory_categories",
                "ordering": ["department", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="CycleCount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("count_number", models.CharField(blank=True, max_length=100)),
                (
                    "count_type",
                    models.CharField(
                        choices=[
                            ("CYCLE", "Cycle Count"),
                            ("PHYSICAL", "Physical Inventory"),
                            ("SPOT", "Spot Count"),
                            ("ABC", "ABC Count"),
                            ("LOCATION", "Location Count"),
                        ],
                        default="CYCLE",
                        max_length=20,
                    ),
                ),
                (
                    "abc_class",
                    models.CharField(
                        blank=True,
                        choices=[("A", "Class A"), ("B", "Class B"), ("C", "Class C")],
                        max_length=1,
                    ),
                ),
                ("scheduled_date", models.DateField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("cutoff_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Scheduled"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                    ),
                ),
                ("total_items_to_count", models.PositiveIntegerField(default=0)),
                ("items_counted", models.PositiveIntegerField(default=0)),
                ("items_with_variance", models.PositiveIntegerField(default=0)),
                (
                    "total_variance_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("counting_instructions", models.TextField(blank=True)),
                (
                    "variance_tolerance_percentage",
                    models.DecimalField(decimal_places=2, default=5, max_digits=5),
                ),
                ("require_approval_for_adjustments", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                ("freeze_transactions", models.BooleanField(default=False)),
                (
                    "assigned_to",
                    models.ManyToManyField(
                        blank=True,
                        related_name="assigned_cycle_counts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_cycle_counts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "inventory_cycle_counts",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("revenue_account_code", models.CharField(blank=True, max_length=20)),
                ("cost_account_code", models.CharField(blank=True, max_length=20)),
                (
                    "default_markup_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "commission_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="departments/"),
                ),
                ("icon_class", models.CharField(blank=True, max_length=50)),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_departments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="inventory.department",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_departments",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("sku", models.CharField(db_index=True, max_length=50)),
                ("internal_code", models.CharField(blank=True, max_length=50)),
                ("model_number", models.CharField(blank=True, max_length=100)),
                ("part_number", models.CharField(blank=True, max_length=100)),
                ("barcode", models.CharField(blank=True, db_index=True, max_length=50)),
                ("upc", models.CharField(blank=True, max_length=20)),
                ("ean", models.CharField(blank=True, max_length=20)),
                ("isbn", models.CharField(blank=True, max_length=20)),
                ("qr_code", models.CharField(blank=True, max_length=100)),
                ("rfid_tag", models.CharField(blank=True, max_length=100)),
                (
                    "product_type",
                    models.CharField(
                        choices=[
                            ("SIMPLE", "Simple Product"),
                            ("VARIABLE", "Variable Product"),
                            ("GROUPED", "Grouped Product"),
                            ("BUNDLE", "Product Bundle"),
                            ("KIT", "Kit Product"),
                            ("SERVICE", "Service"),
                            ("DIGITAL", "Digital Product"),
                            ("VIRTUAL", "Virtual Product"),
                            ("CONFIGURABLE", "Configurable Product"),
                            ("COMPOSITE", "Composite Product"),
                        ],
                        default="SIMPLE",
                        max_length=20,
                    ),
                ),
                ("short_description", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                ("long_description", models.TextField(blank=True)),
                (
                    "technical_specifications",
                    models.JSONField(blank=True, default=dict),
                ),
                ("features", models.JSONField(blank=True, default=list)),
                ("benefits", models.JSONField(blank=True, default=list)),
                (
                    "weight",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "volume",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                ("track_inventory", models.BooleanField(default=True)),
                ("is_serialized", models.BooleanField(default=False)),
                ("is_lot_tracked", models.BooleanField(default=False)),
                ("is_batch_tracked", models.BooleanField(default=False)),
                ("is_perishable", models.BooleanField(default=False)),
                ("shelf_life_days", models.IntegerField(blank=True, null=True)),
                ("allow_backorders", models.BooleanField(default=False)),
                ("allow_preorders", models.BooleanField(default=False)),
                (
                    "min_stock_level",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "max_stock_level",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "reorder_point",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "reorder_quantity",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "safety_stock",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "economic_order_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "standard_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "selling_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "msrp",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "map_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("tax_category", models.CharField(blank=True, max_length=50)),
                (
                    "tax_rate",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("hsn_code", models.CharField(blank=True, max_length=20)),
                ("commodity_code", models.CharField(blank=True, max_length=20)),
                ("country_of_origin", models.CharField(blank=True, max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("DISCONTINUED", "Discontinued"),
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("DRAFT", "Draft"),
                            ("ARCHIVED", "Archived"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "lifecycle_stage",
                    models.CharField(
                        choices=[
                            ("INTRODUCTION", "Introduction"),
                            ("GROWTH", "Growth"),
                            ("MATURITY", "Maturity"),
                            ("DECLINE", "Decline"),
                            ("END_OF_LIFE", "End of Life"),
                        ],
                        default="INTRODUCTION",
                        max_length=20,
                    ),
                ),
                ("is_purchasable", models.BooleanField(default=True)),
                ("is_saleable", models.BooleanField(default=True)),
                ("is_returnable", models.BooleanField(default=True)),
                ("is_shippable", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("requires_inspection", models.BooleanField(default=False)),
                ("quality_control_required", models.BooleanField(default=False)),
                ("hazardous_material", models.BooleanField(default=False)),
                ("controlled_substance", models.BooleanField(default=False)),
                (
                    "package_weight",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "package_length",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "package_width",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "package_height",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                ("pieces_per_package", models.IntegerField(default=1)),
                ("packages_per_case", models.IntegerField(default=1)),
                (
                    "primary_image",
                    models.ImageField(blank=True, null=True, upload_to="products/"),
                ),
                ("image_url", models.URLField(blank=True)),
                ("images", models.JSONField(blank=True, default=list)),
                ("videos", models.JSONField(blank=True, default=list)),
                ("documents", models.JSONField(blank=True, default=list)),
                ("seo_title", models.CharField(blank=True, max_length=255)),
                ("seo_description", models.TextField(blank=True)),
                ("seo_keywords", models.CharField(blank=True, max_length=500)),
                ("meta_tags", models.JSONField(blank=True, default=dict)),
                ("launch_date", models.DateField(blank=True, null=True)),
                ("discontinue_date", models.DateField(blank=True, null=True)),
                ("last_sold_date", models.DateTimeField(blank=True, null=True)),
                ("last_purchased_date", models.DateTimeField(blank=True, null=True)),
                (
                    "sales_velocity",
                    models.DecimalField(decimal_places=3, default=0, max_digits=10),
                ),
                (
                    "abc_classification",
                    models.CharField(
                        blank=True,
                        choices=[("A", "Class A"), ("B", "Class B"), ("C", "Class C")],
                        max_length=1,
                    ),
                ),
                (
                    "xyz_classification",
                    models.CharField(
                        blank=True,
                        choices=[("X", "Class X"), ("Y", "Class Y"), ("Z", "Class Z")],
                        max_length=1,
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("custom_fields", models.JSONField(blank=True, default=dict)),
                ("internal_notes", models.TextField(blank=True)),
                (
                    "brand",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        to="inventory.brand",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="inventory.category",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="inventory.department",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_products",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ProductAttribute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(max_length=100)),
                (
                    "attribute_type",
                    models.CharField(
                        choices=[
                            ("TEXT", "Text"),
                            ("NUMBER", "Number"),
                            ("DECIMAL", "Decimal"),
                            ("BOOLEAN", "Boolean"),
                            ("DATE", "Date"),
                            ("COLOR", "Color"),
                            ("IMAGE", "Image"),
                            ("URL", "URL"),
                            ("EMAIL", "Email"),
                            ("SELECT", "Single Select"),
                            ("MULTISELECT", "Multiple Select"),
                            ("TEXTAREA", "Text Area"),
                            ("JSON", "JSON Data"),
                        ],
                        default="TEXT",
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                ("is_unique", models.BooleanField(default=False)),
                ("is_searchable", models.BooleanField(default=True)),
                ("is_filterable", models.BooleanField(default=True)),
                ("is_variant_attribute", models.BooleanField(default=False)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("display_name", models.CharField(blank=True, max_length=100)),
                ("help_text", models.CharField(blank=True, max_length=255)),
                ("placeholder_text", models.CharField(blank=True, max_length=100)),
                ("validation_rules", models.JSONField(blank=True, default=dict)),
                ("default_value", models.CharField(blank=True, max_length=255)),
                ("attribute_group", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_attributes",
                "ordering": ["attribute_group", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ProductVariation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("variation_code", models.CharField(blank=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("sku", models.CharField(blank=True, max_length=50)),
                ("barcode", models.CharField(blank=True, max_length=50)),
                (
                    "cost_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "selling_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "msrp",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "min_stock_level",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "reorder_point",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "reorder_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "primary_image",
                    models.ImageField(blank=True, null=True, upload_to="variations/"),
                ),
                ("images", models.JSONField(blank=True, default=list)),
                ("description", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "attribute_values",
                    models.ManyToManyField(
                        blank=True,
                        related_name="product_variations",
                        to="inventory.attributevalue",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variations",
                        to="inventory.product",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_variations",
                "ordering": ["product__name", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("po_number", models.CharField(blank=True, max_length=100)),
                (
                    "po_type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard Purchase"),
                            ("DROP_SHIP", "Drop Ship"),
                            ("CONSIGNMENT", "Consignment"),
                            ("BLANKET", "Blanket Order"),
                            ("SERVICE", "Service Order"),
                        ],
                        default="STANDARD",
                        max_length=20,
                    ),
                ),
                ("order_date", models.DateField(default=datetime.date.today)),
                ("required_date", models.DateField()),
                ("promised_date", models.DateField(blank=True, null=True)),
                ("expected_date", models.DateField(blank=True, null=True)),
                ("delivery_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("SENT_TO_SUPPLIER", "Sent to Supplier"),
                            ("ACKNOWLEDGED", "Acknowledged by Supplier"),
                            ("CONFIRMED", "Confirmed"),
                            ("PARTIAL_RECEIVED", "Partially Received"),
                            ("RECEIVED", "Fully Received"),
                            ("INVOICED", "Invoiced"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                            ("RETURNED", "Returned"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                            ("EMERGENCY", "Emergency"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=4, default=1, max_digits=10),
                ),
                (
                    "subtotal",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "tax_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "tax_rate",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "discount_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "shipping_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "handling_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "other_charges",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "total_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("payment_terms", models.CharField(blank=True, max_length=100)),
                ("payment_due_date", models.DateField(blank=True, null=True)),
                (
                    "early_payment_discount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "late_payment_penalty",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("shipping_method", models.CharField(blank=True, max_length=100)),
                ("shipping_terms", models.CharField(blank=True, max_length=100)),
                ("carrier", models.CharField(blank=True, max_length=100)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("supplier_po_number", models.CharField(blank=True, max_length=100)),
                ("supplier_quote_number", models.CharField(blank=True, max_length=100)),
                ("supplier_contact", models.CharField(blank=True, max_length=100)),
                ("is_dropship_order", models.BooleanField(default=False)),
                (
                    "dropship_customer_name",
                    models.CharField(blank=True, max_length=200),
                ),
                ("dropship_address", models.JSONField(blank=True, default=dict)),
                ("requires_inspection", models.BooleanField(default=False)),
                (
                    "inspection_required_percentage",
                    models.DecimalField(decimal_places=2, default=100, max_digits=5),
                ),
                ("quality_standards", models.TextField(blank=True)),
                ("terms_and_conditions", models.TextField(blank=True)),
                ("special_instructions", models.TextField(blank=True)),
                ("internal_notes", models.TextField(blank=True)),
                ("reason_for_purchase", models.TextField(blank=True)),
                ("documents", models.JSONField(blank=True, default=list)),
                ("revision_number", models.IntegerField(default=1)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "buyer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_purchase_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "inventory_purchase_orders",
                "ordering": ["-order_date", "-id"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrderItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.PositiveIntegerField()),
                ("supplier_sku", models.CharField(blank=True, max_length=50)),
                ("supplier_product_name", models.CharField(blank=True, max_length=200)),
                (
                    "quantity_ordered",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_received",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_invoiced",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_rejected",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "unit_conversion_factor",
                    models.DecimalField(decimal_places=6, default=1, max_digits=10),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "discount_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "discount_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                ("required_date", models.DateField(blank=True, null=True)),
                ("promised_date", models.DateField(blank=True, null=True)),
                ("requires_inspection", models.BooleanField(default=False)),
                (
                    "inspection_percentage",
                    models.DecimalField(decimal_places=2, default=100, max_digits=5),
                ),
                ("quality_specifications", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ORDERED", "Ordered"),
                            ("CONFIRMED", "Confirmed"),
                            ("PARTIAL_RECEIVED", "Partially Received"),
                            ("RECEIVED", "Fully Received"),
                            ("CANCELLED", "Cancelled"),
                            ("RETURNED", "Returned"),
                        ],
                        default="ORDERED",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("special_instructions", models.TextField(blank=True)),
            ],
            options={
                "db_table": "inventory_purchase_order_items",
                "ordering": ["purchase_order", "line_number"],
            },
        ),
        migrations.CreateModel(
            name="StockAdjustment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("adjustment_number", models.CharField(blank=True, max_length=100)),
                (
                    "adjustment_type",
                    models.CharField(
                        choices=[
                            ("INCREASE", "Stock Increase"),
                            ("DECREASE", "Stock Decrease"),
                            ("WRITE_OFF", "Write Off"),
                            ("WRITE_ON", "Write On"),
                            ("REVALUATION", "Cost Revaluation"),
                            ("CORRECTION", "Correction"),
                            ("DAMAGE", "Damage"),
                            ("THEFT", "Theft/Loss"),
                            ("EXPIRY", "Expiry"),
                            ("OBSOLETE", "Obsolete Stock"),
                            ("FOUND", "Found Stock"),
                            ("SAMPLE", "Sample/Demo"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("adjustment_date", models.DateField(default=datetime.date.today)),
                ("effective_date", models.DateField(default=datetime.date.today)),
                ("posting_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("POSTED", "Posted"),
                            ("CANCELLED", "Cancelled"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("posted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "total_quantity_impact",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "total_value_impact",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("reason", models.TextField()),
                ("supporting_documents", models.JSONField(blank=True, default=list)),
                ("approval_justification", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_adjustments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_adjustments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cycle_count",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="adjustments",
                        to="inventory.cyclecount",
                    ),
                ),
                (
                    "posted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="posted_adjustments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_adjustments",
                "ordering": ["-adjustment_date"],
            },
        ),
        migrations.CreateModel(
            name="StockItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quantity_on_hand",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_available",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_reserved",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_allocated",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_incoming",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_on_order",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_picked",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_shipped",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "unit_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "average_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "standard_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "last_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "abc_classification",
                    models.CharField(
                        blank=True,
                        choices=[("A", "Class A"), ("B", "Class B"), ("C", "Class C")],
                        max_length=1,
                    ),
                ),
                (
                    "xyz_classification",
                    models.CharField(
                        blank=True,
                        choices=[("X", "Class X"), ("Y", "Class Y"), ("Z", "Class Z")],
                        max_length=1,
                    ),
                ),
                ("last_counted_date", models.DateTimeField(blank=True, null=True)),
                ("cycle_count_frequency_days", models.IntegerField(default=90)),
                ("next_count_due", models.DateField(blank=True, null=True)),
                (
                    "variance_tolerance_percentage",
                    models.DecimalField(decimal_places=2, default=5, max_digits=5),
                ),
                ("last_movement_date", models.DateTimeField(blank=True, null=True)),
                ("last_movement_type", models.CharField(blank=True, max_length=20)),
                ("total_movements_count", models.IntegerField(default=0)),
                (
                    "turnover_rate",
                    models.DecimalField(decimal_places=3, default=0, max_digits=8),
                ),
                (
                    "days_on_hand",
                    models.DecimalField(decimal_places=1, default=0, max_digits=8),
                ),
                ("stockout_count", models.IntegerField(default=0)),
                ("last_stockout_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_quarantined", models.BooleanField(default=False)),
                ("is_consignment", models.BooleanField(default=False)),
                ("is_dropship", models.BooleanField(default=False)),
                ("requires_special_handling", models.BooleanField(default=False)),
                ("handling_instructions", models.TextField(blank=True)),
                (
                    "storage_temperature_min",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "storage_temperature_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "storage_humidity_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("external_system_id", models.CharField(blank=True, max_length=100)),
                ("external_system_name", models.CharField(blank=True, max_length=50)),
                ("last_sync_date", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("custom_fields", models.JSONField(blank=True, default=dict)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stock_items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "last_counted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="counted_stock_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_items",
            },
        ),
        migrations.CreateModel(
            name="StockLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=20)),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("RECEIVING", "Receiving Area"),
                            ("STORAGE", "Storage Area"),
                            ("PICKING", "Picking Area"),
                            ("PACKING", "Packing Area"),
                            ("SHIPPING", "Shipping Area"),
                            ("QUARANTINE", "Quarantine Area"),
                            ("RETURNS", "Returns Area"),
                            ("QUALITY_CONTROL", "Quality Control"),
                            ("STAGING", "Staging Area"),
                            ("CROSS_DOCK", "Cross Dock"),
                        ],
                        default="STORAGE",
                        max_length=20,
                    ),
                ),
                ("zone", models.CharField(blank=True, max_length=10)),
                ("aisle", models.CharField(blank=True, max_length=10)),
                ("rack", models.CharField(blank=True, max_length=10)),
                ("shelf", models.CharField(blank=True, max_length=10)),
                ("bin", models.CharField(blank=True, max_length=10)),
                ("level", models.CharField(blank=True, max_length=10)),
                (
                    "max_weight",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "max_volume",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=10, null=True
                    ),
                ),
                (
                    "length",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=8, null=True
                    ),
                ),
                (
                    "width",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=8, null=True
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=8, null=True
                    ),
                ),
                ("temperature_controlled", models.BooleanField(default=False)),
                ("humidity_controlled", models.BooleanField(default=False)),
                ("hazmat_approved", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_pickable", models.BooleanField(default=True)),
                ("is_receivable", models.BooleanField(default=True)),
                ("pick_sequence", models.PositiveIntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_locations",
                "ordering": ["warehouse", "zone", "aisle", "rack", "shelf", "bin"],
            },
        ),
        migrations.CreateModel(
            name="StockMovement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "movement_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "movement_type",
                    models.CharField(
                        choices=[
                            ("RECEIVE", "Stock Receipt"),
                            ("PURCHASE", "Purchase Order Receipt"),
                            ("TRANSFER_IN", "Transfer In"),
                            ("RETURN_IN", "Customer Return"),
                            ("ADJUST_IN", "Adjustment Increase"),
                            ("MANUFACTURING_IN", "Manufacturing Output"),
                            ("FOUND", "Found Stock"),
                            ("SALE", "Sale/Shipment"),
                            ("TRANSFER_OUT", "Transfer Out"),
                            ("RETURN_OUT", "Return to Supplier"),
                            ("ADJUST_OUT", "Adjustment Decrease"),
                            ("MANUFACTURING_OUT", "Manufacturing Consumption"),
                            ("DAMAGE", "Damaged Stock"),
                            ("LOSS", "Stock Loss"),
                            ("EXPIRED", "Expired Stock"),
                            ("SAMPLE", "Sample Usage"),
                            ("RESERVE", "Stock Reservation"),
                            ("RELEASE", "Release Reservation"),
                            ("ALLOCATE", "Stock Allocation"),
                            ("PICK", "Stock Picking"),
                            ("SHIP", "Stock Shipment"),
                            ("RELOCATE", "Location Change"),
                            ("QUARANTINE", "Quarantine Stock"),
                            ("RELEASE_QUARANTINE", "Release from Quarantine"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "movement_reason",
                    models.CharField(
                        choices=[
                            ("PURCHASE_ORDER", "Purchase Order"),
                            ("SALES_ORDER", "Sales Order"),
                            ("TRANSFER_ORDER", "Transfer Order"),
                            ("ADJUSTMENT", "Stock Adjustment"),
                            ("CYCLE_COUNT", "Cycle Count"),
                            ("PHYSICAL_COUNT", "Physical Inventory"),
                            ("CUSTOMER_RETURN", "Customer Return"),
                            ("SUPPLIER_RETURN", "Return to Supplier"),
                            ("MANUFACTURING", "Manufacturing Order"),
                            ("QUALITY_CONTROL", "Quality Control"),
                            ("DAMAGE", "Damaged Goods"),
                            ("EXPIRY", "Product Expiry"),
                            ("THEFT", "Theft/Loss"),
                            ("SAMPLE", "Sample/Demo"),
                            ("CORRECTION", "Data Correction"),
                            ("SYSTEM_ADJUSTMENT", "System Adjustment"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("quantity", models.DecimalField(decimal_places=3, max_digits=12)),
                (
                    "unit_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=4, default=1, max_digits=10),
                ),
                (
                    "stock_before",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "stock_after",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                ("reference_type", models.CharField(blank=True, max_length=50)),
                ("reference_id", models.CharField(blank=True, max_length=50)),
                ("reference_number", models.CharField(blank=True, max_length=100)),
                ("document_url", models.URLField(blank=True)),
                (
                    "movement_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("planned_date", models.DateTimeField(blank=True, null=True)),
                ("actual_date", models.DateTimeField(blank=True, null=True)),
                ("is_confirmed", models.BooleanField(default=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                ("reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("custom_fields", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("api_source", models.CharField(blank=True, max_length=50)),
                (
                    "authorized_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authorized_movements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements",
                        to="inventory.batch",
                    ),
                ),
                (
                    "confirmed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="confirmed_movements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "from_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements_from",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stock_movements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movements",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "to_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="movements_to",
                        to="inventory.stocklocation",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_movements",
                "ordering": ["-movement_date"],
            },
        ),
        migrations.CreateModel(
            name="StockReceipt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("receipt_number", models.CharField(blank=True, max_length=100)),
                (
                    "receipt_type",
                    models.CharField(
                        choices=[
                            ("PURCHASE_ORDER", "Purchase Order"),
                            ("TRANSFER", "Transfer Receipt"),
                            ("RETURN", "Customer Return"),
                            ("ADJUSTMENT", "Stock Adjustment"),
                            ("MANUFACTURING", "Manufacturing Output"),
                            ("FOUND_STOCK", "Found Stock"),
                            ("OTHER", "Other"),
                        ],
                        default="PURCHASE_ORDER",
                        max_length=20,
                    ),
                ),
                (
                    "receipt_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("expected_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING", "Pending Receipt"),
                            ("PARTIAL", "Partially Received"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("carrier", models.CharField(blank=True, max_length=100)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("delivery_note_number", models.CharField(blank=True, max_length=100)),
                ("packing_slip_number", models.CharField(blank=True, max_length=100)),
                ("requires_inspection", models.BooleanField(default=False)),
                ("inspection_completed", models.BooleanField(default=False)),
                (
                    "quality_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Inspection"),
                            ("PASSED", "Passed"),
                            ("FAILED", "Failed"),
                            ("PARTIAL_PASS", "Partial Pass"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "exchange_rate",
                    models.DecimalField(decimal_places=4, default=1, max_digits=10),
                ),
                ("notes", models.TextField(blank=True)),
                ("special_instructions", models.TextField(blank=True)),
                ("damage_report", models.TextField(blank=True)),
                ("receipt_documents", models.JSONField(blank=True, default=list)),
                ("photos", models.JSONField(blank=True, default=list)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_stock_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inspected_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inspected_stock_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "purchase_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipts",
                        to="inventory.purchaseorder",
                    ),
                ),
                (
                    "received_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="received_stock_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_receipts",
                "ordering": ["-receipt_date"],
            },
        ),
        migrations.CreateModel(
            name="StockReservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("reservation_number", models.CharField(blank=True, max_length=100)),
                (
                    "reservation_type",
                    models.CharField(
                        choices=[
                            ("SALES_ORDER", "Sales Order"),
                            ("WORK_ORDER", "Work Order"),
                            ("TRANSFER_ORDER", "Transfer Order"),
                            ("SAMPLE", "Sample Request"),
                            ("QUALITY_HOLD", "Quality Hold"),
                            ("MANUAL", "Manual Reservation"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("reference_type", models.CharField(blank=True, max_length=50)),
                ("reference_id", models.CharField(blank=True, max_length=50)),
                ("reference_number", models.CharField(blank=True, max_length=100)),
                ("reserved_for_name", models.CharField(blank=True, max_length=200)),
                ("reserved_for_email", models.EmailField(blank=True, max_length=254)),
                ("reserved_for_phone", models.CharField(blank=True, max_length=20)),
                (
                    "reservation_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("required_date", models.DateTimeField()),
                ("expiry_date", models.DateTimeField()),
                ("fulfilled_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("PARTIAL_FULFILLED", "Partially Fulfilled"),
                            ("FULFILLED", "Fulfilled"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                            ("ON_HOLD", "On Hold"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                ("auto_release_on_expiry", models.BooleanField(default=True)),
                ("send_expiry_notifications", models.BooleanField(default=True)),
                ("reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "fulfilled_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="fulfilled_reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_reservations",
                "ordering": ["-reservation_date"],
            },
        ),
        migrations.CreateModel(
            name="StockTransfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("transfer_number", models.CharField(blank=True, max_length=100)),
                (
                    "transfer_type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard Transfer"),
                            ("EMERGENCY", "Emergency Transfer"),
                            ("REBALANCING", "Stock Rebalancing"),
                            ("RETURN", "Return Transfer"),
                            ("REPAIR", "Repair Transfer"),
                        ],
                        default="STANDARD",
                        max_length=20,
                    ),
                ),
                ("transfer_date", models.DateField(default=datetime.date.today)),
                ("required_date", models.DateField()),
                ("shipped_date", models.DateField(blank=True, null=True)),
                ("received_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_APPROVAL", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("IN_TRANSIT", "In Transit"),
                            ("PARTIAL_RECEIVED", "Partially Received"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("carrier", models.CharField(blank=True, max_length=100)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                (
                    "shipping_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                            ("URGENT", "Urgent"),
                        ],
                        default="NORMAL",
                        max_length=10,
                    ),
                ),
                ("reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("special_instructions", models.TextField(blank=True)),
                ("transfer_documents", models.JSONField(blank=True, default=list)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_transfers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_transfers",
                "ordering": ["-transfer_date"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(max_length=20)),
                ("company_name", models.CharField(blank=True, max_length=200)),
                (
                    "supplier_type",
                    models.CharField(
                        choices=[
                            ("MANUFACTURER", "Manufacturer"),
                            ("WHOLESALER", "Wholesaler"),
                            ("DISTRIBUTOR", "Distributor"),
                            ("RETAILER", "Retailer"),
                            ("DROPSHIPPER", "Drop Shipper"),
                            ("SERVICE_PROVIDER", "Service Provider"),
                            ("CONSIGNMENT", "Consignment"),
                        ],
                        default="WHOLESALER",
                        max_length=20,
                    ),
                ),
                ("tax_id", models.CharField(blank=True, max_length=50)),
                ("vat_number", models.CharField(blank=True, max_length=50)),
                ("business_license", models.CharField(blank=True, max_length=100)),
                ("registration_number", models.CharField(blank=True, max_length=100)),
                ("contact_person", models.CharField(blank=True, max_length=100)),
                ("title", models.CharField(blank=True, max_length=50)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("mobile", models.CharField(blank=True, max_length=20)),
                ("fax", models.CharField(blank=True, max_length=20)),
                ("website", models.URLField(blank=True)),
                ("address_line1", models.CharField(max_length=255)),
                ("address_line2", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                ("billing_same_as_shipping", models.BooleanField(default=True)),
                ("billing_address_line1", models.CharField(blank=True, max_length=255)),
                ("billing_address_line2", models.CharField(blank=True, max_length=255)),
                ("billing_city", models.CharField(blank=True, max_length=100)),
                ("billing_state", models.CharField(blank=True, max_length=100)),
                ("billing_country", models.CharField(blank=True, max_length=100)),
                ("billing_postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "payment_terms",
                    models.CharField(
                        choices=[
                            ("NET_0", "Net 0 (Cash)"),
                            ("NET_7", "Net 7"),
                            ("NET_15", "Net 15"),
                            ("NET_30", "Net 30"),
                            ("NET_45", "Net 45"),
                            ("NET_60", "Net 60"),
                            ("NET_90", "Net 90"),
                            ("COD", "Cash on Delivery"),
                            ("PREPAID", "Prepaid"),
                            ("CREDIT_CARD", "Credit Card"),
                        ],
                        default="NET_30",
                        max_length=20,
                    ),
                ),
                ("payment_terms_days", models.IntegerField(default=30)),
                (
                    "credit_limit",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "credit_used",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("bank_name", models.CharField(blank=True, max_length=100)),
                ("bank_account_number", models.CharField(blank=True, max_length=50)),
                ("bank_routing_number", models.CharField(blank=True, max_length=50)),
                ("swift_code", models.CharField(blank=True, max_length=20)),
                ("lead_time_days", models.IntegerField(default=7)),
                (
                    "minimum_order_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "maximum_order_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "quality_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "delivery_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "service_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "overall_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("supports_dropshipping", models.BooleanField(default=False)),
                (
                    "dropship_fee_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "dropship_handling_fee",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("api_endpoint", models.URLField(blank=True)),
                ("api_key", models.CharField(blank=True, max_length=255)),
                ("edi_capability", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_preferred", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_minority_owned", models.BooleanField(default=False)),
                ("is_woman_owned", models.BooleanField(default=False)),
                ("certifications", models.JSONField(blank=True, default=list)),
                (
                    "insurance_certificate",
                    models.FileField(blank=True, null=True, upload_to="supplier_docs/"),
                ),
                (
                    "tax_certificate",
                    models.FileField(blank=True, null=True, upload_to="supplier_docs/"),
                ),
                ("return_policy", models.TextField(blank=True)),
                ("warranty_terms", models.TextField(blank=True)),
                ("special_terms", models.TextField(blank=True)),
                ("internal_notes", models.TextField(blank=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_suppliers",
                "ordering": ["-is_preferred", "name"],
            },
        ),
        migrations.CreateModel(
            name="UnitOfMeasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                ("abbreviation", models.CharField(max_length=10)),
                ("symbol", models.CharField(blank=True, max_length=5)),
                (
                    "unit_type",
                    models.CharField(
                        choices=[
                            ("COUNT", "Count/Each"),
                            ("WEIGHT", "Weight"),
                            ("VOLUME", "Volume"),
                            ("LENGTH", "Length"),
                            ("AREA", "Area"),
                            ("TIME", "Time"),
                            ("TEMPERATURE", "Temperature"),
                            ("ENERGY", "Energy"),
                            ("CURRENCY", "Currency"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "conversion_factor",
                    models.DecimalField(
                        decimal_places=6,
                        default=1.0,
                        help_text="Factor to convert to base unit",
                        max_digits=15,
                    ),
                ),
                (
                    "conversion_offset",
                    models.DecimalField(
                        decimal_places=6,
                        default=0,
                        help_text="Offset for temperature conversions",
                        max_digits=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_base_unit", models.BooleanField(default=False)),
                ("allow_fractions", models.BooleanField(default=True)),
                ("decimal_places", models.IntegerField(default=3)),
                ("description", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "base_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="derived_units",
                        to="inventory.unitofmeasure",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_units",
                "ordering": ["unit_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="VendorManagedInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("vmi_number", models.CharField(blank=True, max_length=100)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("review_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("TERMINATED", "Terminated"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("min_stock_days", models.IntegerField(default=7)),
                ("max_stock_days", models.IntegerField(default=30)),
                ("reorder_frequency_days", models.IntegerField(default=7)),
                (
                    "service_level_percentage",
                    models.DecimalField(decimal_places=2, default=95, max_digits=5),
                ),
                ("consignment_stock", models.BooleanField(default=False)),
                ("payment_terms_days", models.IntegerField(default=30)),
                ("price_protection_days", models.IntegerField(default=30)),
                (
                    "current_service_level",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("stockout_incidents", models.IntegerField(default=0)),
                (
                    "excess_stock_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("supplier_contact", models.CharField(blank=True, max_length=200)),
                ("terms_and_conditions", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "internal_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_vmi_agreements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vmi_agreements",
                        to="inventory.supplier",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_vendor_managed_inventory",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Warehouse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                (
                    "warehouse_type",
                    models.CharField(
                        choices=[
                            ("PHYSICAL", "Physical Warehouse"),
                            ("VIRTUAL", "Virtual/Drop-ship"),
                            ("CONSIGNMENT", "Consignment"),
                            ("TRANSIT", "In-Transit"),
                            ("QUARANTINE", "Quarantine"),
                            ("RETURNED_GOODS", "Returned Goods"),
                            ("WORK_IN_PROGRESS", "Work in Progress"),
                        ],
                        default="PHYSICAL",
                        max_length=20,
                    ),
                ),
                ("address_line1", models.CharField(max_length=255)),
                ("address_line2", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("is_sellable", models.BooleanField(default=True)),
                ("allow_negative_stock", models.BooleanField(default=False)),
                (
                    "total_area",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "storage_area",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "max_capacity",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "current_occupancy_percentage",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "temperature_zone",
                    models.CharField(
                        choices=[
                            ("AMBIENT", "Ambient Temperature"),
                            ("REFRIGERATED", "Refrigerated (2-8°C)"),
                            ("FROZEN", "Frozen (-18°C)"),
                            ("CONTROLLED", "Temperature Controlled"),
                            ("HAZMAT", "Hazardous Materials"),
                        ],
                        default="AMBIENT",
                        max_length=20,
                    ),
                ),
                (
                    "min_temperature",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "max_temperature",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("humidity_controlled", models.BooleanField(default=False)),
                (
                    "security_level",
                    models.CharField(
                        choices=[
                            ("BASIC", "Basic"),
                            ("STANDARD", "Standard"),
                            ("HIGH", "High Security"),
                            ("MAXIMUM", "Maximum Security"),
                        ],
                        default="STANDARD",
                        max_length=20,
                    ),
                ),
                ("cctv_enabled", models.BooleanField(default=False)),
                ("access_control_enabled", models.BooleanField(default=False)),
                ("fire_suppression_system", models.BooleanField(default=False)),
                ("operating_hours", models.JSONField(blank=True, default=dict)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "rent_cost_per_month",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "utility_cost_per_month",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "labor_cost_per_month",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "other_costs_per_month",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("wms_system", models.CharField(blank=True, max_length=50)),
                ("wms_integration_enabled", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
                ("special_handling_instructions", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "area_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="warehouse_areas",
                        to="inventory.unitofmeasure",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_warehouses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_warehouses",
                "ordering": ["-is_default", "name"],
            },
        ),
        migrations.CreateModel(
            name="VMIProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "min_stock_level",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "max_stock_level",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "target_stock_level",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "average_daily_consumption",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("lead_time_days", models.IntegerField(default=7)),
                (
                    "safety_stock",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("agreed_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("price_valid_until", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("last_replenishment_date", models.DateField(blank=True, null=True)),
                ("next_review_date", models.DateField(blank=True, null=True)),
                ("stockout_count", models.IntegerField(default=0)),
                ("excess_stock_days", models.IntegerField(default=0)),
                (
                    "service_level_percentage",
                    models.DecimalField(decimal_places=2, default=100, max_digits=5),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vmi_products",
                        to="inventory.product",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "vmi_agreement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="inventory.vendormanagedinventory",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_vmi_products",
            },
        ),
        migrations.AddField(
            model_name="vendormanagedinventory",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vmi_agreements",
                to="inventory.warehouse",
            ),
        ),
        migrations.CreateModel(
            name="SupplierContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("PRIMARY", "Primary Contact"),
                            ("SALES", "Sales Representative"),
                            ("SUPPORT", "Customer Support"),
                            ("TECHNICAL", "Technical Support"),
                            ("BILLING", "Billing/Accounts"),
                            ("SHIPPING", "Shipping/Logistics"),
                            ("EMERGENCY", "Emergency Contact"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("title", models.CharField(blank=True, max_length=50)),
                ("department", models.CharField(blank=True, max_length=50)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("mobile", models.CharField(blank=True, max_length=20)),
                ("is_primary", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="inventory.supplier",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_supplier_contacts",
                "ordering": ["supplier", "-is_primary", "name"],
            },
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=20)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("sort_order", models.PositiveIntegerField(default=0)),
                ("specification_template", models.JSONField(blank=True, default=dict)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="inventory.category",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Sub Categories",
                "db_table": "inventory_subcategories",
                "ordering": ["category", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="StockValuationLayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("layer_sequence", models.PositiveIntegerField()),
                (
                    "receipt_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "quantity_received",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_consumed",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_remaining",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=15)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("source_document_type", models.CharField(blank=True, max_length=50)),
                ("source_document_id", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("is_fully_consumed", models.BooleanField(default=False)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="valuation_layers",
                        to="inventory.batch",
                    ),
                ),
                (
                    "source_movement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="valuation_layers",
                        to="inventory.stockmovement",
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="valuation_layers",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_valuation_layers",
                "ordering": ["stock_item", "receipt_date", "layer_sequence"],
            },
        ),
        migrations.CreateModel(
            name="StockTransferItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.PositiveIntegerField()),
                (
                    "quantity_requested",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_shipped",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_received",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_damaged",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("serial_numbers", models.JSONField(blank=True, default=list)),
                (
                    "unit_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("REQUESTED", "Requested"),
                            ("APPROVED", "Approved"),
                            ("PICKED", "Picked"),
                            ("SHIPPED", "Shipped"),
                            ("RECEIVED", "Received"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="REQUESTED",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("damage_description", models.TextField(blank=True)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transfer_items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "from_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transfer_items_from",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfer_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "to_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transfer_items_to",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "transfer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.stocktransfer",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transfer_items",
                        to="inventory.unitofmeasure",
                    ),
                ),
                (
                    "variation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfer_items",
                        to="inventory.productvariation",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_transfer_items",
                "ordering": ["transfer", "line_number"],
            },
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="from_warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="transfers_out",
                to="inventory.warehouse",
            ),
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="received_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="received_transfers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="requested_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="requested_transfers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="shipped_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="shipped_transfers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="stocktransfer",
            name="to_warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="transfers_in",
                to="inventory.warehouse",
            ),
        ),
        migrations.CreateModel(
            name="StockReservationItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.PositiveIntegerField()),
                (
                    "quantity_reserved",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_fulfilled",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_pending",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "unit_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "total_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("RESERVED", "Reserved"),
                            ("PARTIAL_FULFILLED", "Partially Fulfilled"),
                            ("FULFILLED", "Fulfilled"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="RESERVED",
                        max_length=20,
                    ),
                ),
                (
                    "reserved_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("fulfilled_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reservation_items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reservation_items",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservation_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "reservation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.stockreservation",
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservation_items",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reservation_items",
                        to="inventory.unitofmeasure",
                    ),
                ),
                (
                    "variation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservation_items",
                        to="inventory.productvariation",
                    ),
                ),
                (
                    "warehouse",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservation_items",
                        to="inventory.warehouse",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_reservation_items",
                "ordering": ["reservation", "line_number"],
            },
        ),
        migrations.CreateModel(
            name="StockReceiptItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.PositiveIntegerField()),
                (
                    "quantity_expected",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_received",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_accepted",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "quantity_rejected",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                ("batch_number", models.CharField(blank=True, max_length=50)),
                ("lot_number", models.CharField(blank=True, max_length=50)),
                ("serial_numbers", models.JSONField(blank=True, default=list)),
                ("manufacture_date", models.DateField(blank=True, null=True)),
                ("expiry_date", models.DateField(blank=True, null=True)),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "quality_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Inspection"),
                            ("PASSED", "Passed"),
                            ("FAILED", "Failed"),
                            ("QUARANTINED", "Quarantined"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("rejection_reason", models.TextField(blank=True)),
                ("quality_notes", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("damage_description", models.TextField(blank=True)),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="receipt_items",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipt_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "purchase_order_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="receipt_items",
                        to="inventory.purchaseorderitem",
                    ),
                ),
                (
                    "receipt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.stockreceipt",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="receipt_items",
                        to="inventory.unitofmeasure",
                    ),
                ),
                (
                    "variation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipt_items",
                        to="inventory.productvariation",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_receipt_items",
                "ordering": ["receipt", "line_number"],
            },
        ),
        migrations.AddField(
            model_name="stockreceipt",
            name="supplier",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_receipts",
                to="inventory.supplier",
            ),
        ),
        migrations.AddField(
            model_name="stockreceipt",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="stockreceipt",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_receipts",
                to="inventory.warehouse",
            ),
        ),
        migrations.AddField(
            model_name="stocklocation",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="locations",
                to="inventory.warehouse",
            ),
        ),
        migrations.AddField(
            model_name="stockitem",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="stock_items",
                to="inventory.stocklocation",
            ),
        ),
        migrations.AddField(
            model_name="stockitem",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_items",
                to="inventory.product",
            ),
        ),
        migrations.AddField(
            model_name="stockitem",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="stockitem",
            name="variation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_items",
                to="inventory.productvariation",
            ),
        ),
        migrations.AddField(
            model_name="stockitem",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_items",
                to="inventory.warehouse",
            ),
        ),
        migrations.CreateModel(
            name="StockAdjustmentItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("line_number", models.PositiveIntegerField()),
                (
                    "quantity_before",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_adjustment",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "quantity_after",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "unit_cost_before",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "unit_cost_after",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                ("value_impact", models.DecimalField(decimal_places=2, max_digits=15)),
                ("reason", models.TextField(blank=True)),
                ("reference_number", models.CharField(blank=True, max_length=100)),
                ("notes", models.TextField(blank=True)),
                (
                    "adjustment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.stockadjustment",
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="adjustment_items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="adjustment_items",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="adjustment_items",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_stock_adjustment_items",
                "ordering": ["adjustment", "line_number"],
            },
        ),
        migrations.AddField(
            model_name="stockadjustment",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="stock_adjustments",
                to="inventory.warehouse",
            ),
        ),
        migrations.CreateModel(
            name="SerialNumber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("serial_number", models.CharField(max_length=100)),
                ("manufacture_date", models.DateField(blank=True, null=True)),
                ("warranty_start_date", models.DateField(blank=True, null=True)),
                ("warranty_end_date", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Available"),
                            ("RESERVED", "Reserved"),
                            ("SOLD", "Sold"),
                            ("RETURNED", "Returned"),
                            ("DEFECTIVE", "Defective"),
                            ("RECALLED", "Recalled"),
                            ("SCRAPPED", "Scrapped"),
                        ],
                        default="AVAILABLE",
                        max_length=20,
                    ),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "selling_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("customer_name", models.CharField(blank=True, max_length=200)),
                ("customer_email", models.EmailField(blank=True, max_length=254)),
                ("customer_phone", models.CharField(blank=True, max_length=20)),
                ("sale_date", models.DateTimeField(blank=True, null=True)),
                ("service_history", models.JSONField(blank=True, default=list)),
                ("last_service_date", models.DateField(blank=True, null=True)),
                ("next_service_due", models.DateField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("custom_attributes", models.JSONField(blank=True, default=dict)),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serial_numbers",
                        to="inventory.batch",
                    ),
                ),
                (
                    "current_location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="serial_numbers",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serial_numbers",
                        to="inventory.product",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_serial_numbers",
            },
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="delivery_location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="purchase_order_items",
                to="inventory.stocklocation",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="purchase_order_items",
                to="inventory.product",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="purchase_order",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="items",
                to="inventory.purchaseorder",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="unit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="purchase_order_items",
                to="inventory.unitofmeasure",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorderitem",
            name="variation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="purchase_order_items",
                to="inventory.productvariation",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="delivery_warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="purchase_orders",
                to="inventory.warehouse",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="previous_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="revisions",
                to="inventory.purchaseorder",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="supplier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="purchase_orders",
                to="inventory.supplier",
            ),
        ),
        migrations.AddField(
            model_name="purchaseorder",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.CreateModel(
            name="ProductSupplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("supplier_sku", models.CharField(blank=True, max_length=50)),
                ("supplier_product_name", models.CharField(blank=True, max_length=200)),
                (
                    "manufacturer_part_number",
                    models.CharField(blank=True, max_length=100),
                ),
                ("cost_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("price_valid_from", models.DateField(default=datetime.date.today)),
                ("price_valid_to", models.DateField(blank=True, null=True)),
                (
                    "minimum_order_quantity",
                    models.DecimalField(decimal_places=3, default=1, max_digits=12),
                ),
                (
                    "maximum_order_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "order_multiple",
                    models.DecimalField(decimal_places=3, default=1, max_digits=12),
                ),
                ("lead_time_days", models.IntegerField(default=0)),
                (
                    "quality_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "delivery_rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_preferred", models.BooleanField(default=False)),
                ("last_purchase_date", models.DateTimeField(blank=True, null=True)),
                (
                    "last_purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "total_purchases_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("total_orders_count", models.IntegerField(default=0)),
                ("payment_terms", models.CharField(blank=True, max_length=100)),
                ("warranty_terms", models.TextField(blank=True)),
                ("return_policy", models.TextField(blank=True)),
                ("special_terms", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplier_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_items",
                        to="inventory.supplier",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_suppliers",
            },
        ),
        migrations.CreateModel(
            name="ProductAttributeValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("text_value", models.TextField(blank=True)),
                (
                    "number_value",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("date_value", models.DateField(blank=True, null=True)),
                ("boolean_value", models.BooleanField(blank=True, null=True)),
                ("json_value", models.JSONField(blank=True, null=True)),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.productattribute",
                    ),
                ),
                (
                    "multiple_values",
                    models.ManyToManyField(
                        blank=True,
                        related_name="product_multi_values",
                        to="inventory.attributevalue",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attribute_values",
                        to="inventory.product",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "value",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="inventory.attributevalue",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_product_attribute_values",
            },
        ),
        migrations.AddField(
            model_name="productattribute",
            name="unit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="attributes",
                to="inventory.unitofmeasure",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="dimension_unit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="products_by_dimension",
                to="inventory.unitofmeasure",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="preferred_supplier",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="preferred_products",
                to="inventory.supplier",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="subcategory",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="products",
                to="inventory.subcategory",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="unit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="products",
                to="inventory.unitofmeasure",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="weight_unit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="products_by_weight",
                to="inventory.unitofmeasure",
            ),
        ),
        migrations.CreateModel(
            name="InventorySettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "valuation_method",
                    models.CharField(
                        choices=[
                            ("FIFO", "First In First Out"),
                            ("LIFO", "Last In First Out"),
                            ("AVERAGE", "Weighted Average"),
                            ("SPECIFIC", "Specific Identification"),
                            ("STANDARD", "Standard Cost"),
                        ],
                        default="FIFO",
                        max_length=20,
                    ),
                ),
                (
                    "default_currency",
                    models.CharField(
                        choices=[
                            ("USD", "US Dollar"),
                            ("EUR", "Euro"),
                            ("GBP", "British Pound"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("CAD", "Canadian Dollar"),
                            ("AUD", "Australian Dollar"),
                        ],
                        default="USD",
                        max_length=3,
                    ),
                ),
                ("enable_multi_currency", models.BooleanField(default=False)),
                (
                    "decimal_precision",
                    models.IntegerField(
                        default=2,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ],
                    ),
                ),
                ("low_stock_alert_enabled", models.BooleanField(default=True)),
                (
                    "low_stock_threshold_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=20.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("auto_reorder_enabled", models.BooleanField(default=False)),
                ("allow_negative_stock", models.BooleanField(default=False)),
                ("enable_reserved_stock", models.BooleanField(default=True)),
                ("enable_allocated_stock", models.BooleanField(default=True)),
                ("enable_batch_tracking", models.BooleanField(default=True)),
                ("enable_serial_tracking", models.BooleanField(default=False)),
                ("enable_lot_tracking", models.BooleanField(default=True)),
                ("enable_expiry_tracking", models.BooleanField(default=True)),
                ("enable_landed_cost", models.BooleanField(default=False)),
                ("enable_barcode", models.BooleanField(default=True)),
                ("enable_qr_code", models.BooleanField(default=True)),
                ("auto_generate_barcodes", models.BooleanField(default=True)),
                (
                    "barcode_prefix",
                    models.CharField(blank=True, default="PRD", max_length=10),
                ),
                ("enable_dropshipping", models.BooleanField(default=False)),
                ("enable_consignment", models.BooleanField(default=False)),
                ("enable_third_party_logistics", models.BooleanField(default=False)),
                ("enable_manufacturing", models.BooleanField(default=False)),
                ("enable_kitting", models.BooleanField(default=False)),
                ("enable_bundling", models.BooleanField(default=False)),
                ("enable_quality_control", models.BooleanField(default=False)),
                ("enable_inspection", models.BooleanField(default=False)),
                ("enable_quarantine", models.BooleanField(default=False)),
                ("enable_dynamic_pricing", models.BooleanField(default=False)),
                ("enable_tier_pricing", models.BooleanField(default=False)),
                ("enable_promotional_pricing", models.BooleanField(default=False)),
                (
                    "cost_calculation_method",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard Cost"),
                            ("ACTUAL", "Actual Cost"),
                            ("AVERAGE", "Moving Average"),
                        ],
                        default="AVERAGE",
                        max_length=20,
                    ),
                ),
                ("enable_abc_analysis", models.BooleanField(default=True)),
                ("enable_velocity_analysis", models.BooleanField(default=True)),
                ("enable_seasonality_tracking", models.BooleanField(default=False)),
                ("erp_integration_enabled", models.BooleanField(default=False)),
                ("accounting_integration_enabled", models.BooleanField(default=False)),
                ("ecommerce_integration_enabled", models.BooleanField(default=False)),
                ("require_approval_for_adjustments", models.BooleanField(default=True)),
                ("enable_audit_trail", models.BooleanField(default=True)),
                ("retain_data_years", models.IntegerField(default=7)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory Settings",
                "verbose_name_plural": "Inventory Settings",
                "db_table": "inventory_settings",
            },
        ),
        migrations.CreateModel(
            name="InventoryReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("report_name", models.CharField(max_length=200)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("STOCK_SUMMARY", "Stock Summary"),
                            ("STOCK_VALUATION", "Stock Valuation"),
                            ("ABC_ANALYSIS", "ABC Analysis"),
                            ("VELOCITY_ANALYSIS", "Velocity Analysis"),
                            ("AGING_REPORT", "Aging Report"),
                            ("MOVEMENT_REPORT", "Movement Report"),
                            ("REORDER_REPORT", "Reorder Report"),
                            ("VARIANCE_REPORT", "Variance Report"),
                            ("CYCLE_COUNT_REPORT", "Cycle Count Report"),
                            ("EXPIRY_REPORT", "Expiry Report"),
                            ("DEAD_STOCK_REPORT", "Dead Stock Report"),
                            ("PROFITABILITY_REPORT", "Profitability Report"),
                            ("SUPPLIER_PERFORMANCE", "Supplier Performance"),
                            ("CUSTOM_REPORT", "Custom Report"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("parameters", models.JSONField(blank=True, default=dict)),
                ("filters", models.JSONField(blank=True, default=dict)),
                ("date_range_start", models.DateField(blank=True, null=True)),
                ("date_range_end", models.DateField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("GENERATING", "Generating"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="GENERATING",
                        max_length=20,
                    ),
                ),
                ("generated_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("data", models.JSONField(blank=True, default=dict)),
                ("summary", models.JSONField(blank=True, default=dict)),
                ("file_path", models.CharField(blank=True, max_length=500)),
                ("file_url", models.URLField(blank=True)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                ("is_public", models.BooleanField(default=False)),
                ("download_count", models.PositiveIntegerField(default=0)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("is_scheduled", models.BooleanField(default=False)),
                (
                    "schedule_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True, related_name="reports", to="inventory.category"
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True, related_name="reports", to="inventory.product"
                    ),
                ),
                (
                    "shared_with",
                    models.ManyToManyField(
                        blank=True,
                        related_name="shared_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "warehouses",
                    models.ManyToManyField(
                        blank=True, related_name="reports", to="inventory.warehouse"
                    ),
                ),
            ],
            options={
                "db_table": "inventory_reports",
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="InventoryAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "alert_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("LOW_STOCK", "Low Stock"),
                            ("OUT_OF_STOCK", "Out of Stock"),
                            ("OVERSTOCK", "Overstock"),
                            ("REORDER_POINT", "Reorder Point Reached"),
                            ("EXPIRY_WARNING", "Expiry Warning"),
                            ("EXPIRED_STOCK", "Expired Stock"),
                            ("NEGATIVE_STOCK", "Negative Stock"),
                            ("SLOW_MOVING", "Slow Moving Stock"),
                            ("DEAD_STOCK", "Dead Stock"),
                            ("VARIANCE_ALERT", "Stock Variance"),
                            ("QUALITY_ISSUE", "Quality Issue"),
                            ("CYCLE_COUNT_DUE", "Cycle Count Due"),
                            ("TRANSFER_OVERDUE", "Transfer Overdue"),
                            ("RESERVATION_EXPIRY", "Reservation Expiring"),
                            ("PRICE_CHANGE", "Price Change"),
                            ("COST_VARIANCE", "Cost Variance"),
                            ("SYSTEM_ERROR", "System Error"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("details", models.JSONField(blank=True, default=dict)),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("RESOLVED", "Resolved"),
                            ("DISMISSED", "Dismissed"),
                            ("SNOOZED", "Snoozed"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("snoozed_until", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("email_sent", models.BooleanField(default=False)),
                ("sms_sent", models.BooleanField(default=False)),
                ("push_sent", models.BooleanField(default=False)),
                ("notification_count", models.PositiveIntegerField(default=0)),
                ("last_notification_sent", models.DateTimeField(blank=True, null=True)),
                ("auto_resolve", models.BooleanField(default=False)),
                ("resolution_criteria", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "acknowledged_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="acknowledged_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="inventory.product",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
                (
                    "warehouse",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alerts",
                        to="inventory.warehouse",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_alerts",
                "ordering": ["-created_at", "-severity"],
            },
        ),
        migrations.CreateModel(
            name="CycleCountItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system_quantity",
                    models.DecimalField(decimal_places=3, max_digits=12),
                ),
                (
                    "counted_quantity",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=12, null=True
                    ),
                ),
                (
                    "variance_quantity",
                    models.DecimalField(decimal_places=3, default=0, max_digits=12),
                ),
                (
                    "variance_percentage",
                    models.DecimalField(decimal_places=3, default=0, max_digits=8),
                ),
                ("unit_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "variance_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=15),
                ),
                ("counted_at", models.DateTimeField(blank=True, null=True)),
                ("recount_required", models.BooleanField(default=False)),
                ("recount_completed", models.BooleanField(default=False)),
                (
                    "variance_status",
                    models.CharField(
                        choices=[
                            ("NO_VARIANCE", "No Variance"),
                            ("MINOR_VARIANCE", "Minor Variance"),
                            ("MAJOR_VARIANCE", "Major Variance"),
                            ("PENDING_RECOUNT", "Pending Recount"),
                            ("APPROVED", "Approved"),
                            ("ADJUSTED", "Adjusted"),
                        ],
                        default="NO_VARIANCE",
                        max_length=20,
                    ),
                ),
                ("adjustment_approved", models.BooleanField(default=False)),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("variance_reason", models.TextField(blank=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_count_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cycle_count_items",
                        to="inventory.batch",
                    ),
                ),
                (
                    "counted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="counted_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cycle_count",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="inventory.cyclecount",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cycle_count_items",
                        to="inventory.stocklocation",
                    ),
                ),
                (
                    "stock_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cycle_count_items",
                        to="inventory.stockitem",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_set",
                        to="core.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "inventory_cycle_count_items",
                "ordering": ["cycle_count", "location", "stock_item"],
            },
        ),
        migrations.AddField(
            model_name="cyclecount",
            name="locations",
            field=models.ManyToManyField(
                blank=True, related_name="cycle_counts", to="inventory.stocklocation"
            ),
        ),
        migrations.AddField(
            model_name="cyclecount",
            name="products",
            field=models.ManyToManyField(
                blank=True, related_name="cycle_counts", to="inventory.product"
            ),
        ),
        migrations.AddField(
            model_name="cyclecount",
            name="supervised_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="supervised_cycle_counts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="cyclecount",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="cyclecount",
            name="warehouse",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cycle_counts",
                to="inventory.warehouse",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="department",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="categories",
                to="inventory.department",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="inventory.category",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="batch",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="batches",
                to="inventory.product",
            ),
        ),
        migrations.AddField(
            model_name="batch",
            name="supplier",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="batches",
                to="inventory.supplier",
            ),
        ),
        migrations.AddField(
            model_name="batch",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddField(
            model_name="attributevalue",
            name="attribute",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="values",
                to="inventory.productattribute",
            ),
        ),
        migrations.AddField(
            model_name="attributevalue",
            name="tenant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_set",
                to="core.tenant",
            ),
        ),
        migrations.AddIndex(
            model_name="warehouse",
            index=models.Index(
                fields=["tenant", "code"], name="inventory_w_tenant__25d73e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="warehouse",
            index=models.Index(
                fields=["tenant", "is_active", "is_default"],
                name="inventory_w_tenant__fcba60_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="warehouse",
            index=models.Index(
                fields=["tenant", "warehouse_type"],
                name="inventory_w_tenant__40e0ee_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="warehouse",
            constraint=models.UniqueConstraint(
                fields=("tenant", "code"), name="unique_tenant_warehouse_code"
            ),
        ),
        migrations.AddIndex(
            model_name="vmiproduct",
            index=models.Index(
                fields=["tenant", "vmi_agreement", "is_active"],
                name="inventory_v_tenant__eb8e86_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vmiproduct",
            index=models.Index(
                fields=["tenant", "product", "is_active"],
                name="inventory_v_tenant__d8aa38_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="vmiproduct",
            constraint=models.UniqueConstraint(
                fields=("tenant", "vmi_agreement", "product"), name="unique_vmi_product"
            ),
        ),
        migrations.AddIndex(
            model_name="vendormanagedinventory",
            index=models.Index(
                fields=["tenant", "supplier", "status"],
                name="inventory_v_tenant__53fe67_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="vendormanagedinventory",
            index=models.Index(
                fields=["tenant", "warehouse", "status"],
                name="inventory_v_tenant__3a4afe_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="vendormanagedinventory",
            constraint=models.UniqueConstraint(
                fields=("tenant", "vmi_number"), name="unique_tenant_vmi_number"
            ),
        ),
        migrations.AddIndex(
            model_name="unitofmeasure",
            index=models.Index(
                fields=["tenant", "unit_type", "is_active"],
                name="inventory_u_tenant__33d994_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="unitofmeasure",
            constraint=models.UniqueConstraint(
                fields=("tenant", "abbreviation"), name="unique_tenant_uom_abbrev"
            ),
        ),
        migrations.AddConstraint(
            model_name="unitofmeasure",
            constraint=models.UniqueConstraint(
                fields=("tenant", "name"), name="unique_tenant_uom_name"
            ),
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(
                fields=["tenant", "code"], name="inventory_s_tenant__d668e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(
                fields=["tenant", "is_active"], name="inventory_s_tenant__1db421_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="supplier",
            index=models.Index(
                fields=["tenant", "supplier_type"],
                name="inventory_s_tenant__0d5c88_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="supplier",
            constraint=models.UniqueConstraint(
                fields=("tenant", "code"), name="unique_tenant_supplier_code"
            ),
        ),
        migrations.AddIndex(
            model_name="subcategory",
            index=models.Index(
                fields=["tenant", "category", "is_active"],
                name="inventory_s_tenant__ff5f7a_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="subcategory",
            constraint=models.UniqueConstraint(
                fields=("tenant", "category", "code"), name="unique_tenant_subcat_code"
            ),
        ),
        migrations.AddIndex(
            model_name="stockvaluationlayer",
            index=models.Index(
                fields=["tenant", "stock_item", "is_active"],
                name="inventory_s_tenant__a2fb27_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockvaluationlayer",
            index=models.Index(
                fields=["tenant", "stock_item", "receipt_date"],
                name="inventory_s_tenant__89b6bb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stocktransferitem",
            index=models.Index(
                fields=["tenant", "transfer"], name="inventory_s_tenant__fe314f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stocktransferitem",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_s_tenant__8ea19d_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocktransferitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "transfer", "line_number"),
                name="unique_transfer_line_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stocktransfer",
            index=models.Index(
                fields=["tenant", "status", "-transfer_date"],
                name="inventory_s_tenant__fc018e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stocktransfer",
            index=models.Index(
                fields=["tenant", "from_warehouse", "status"],
                name="inventory_s_tenant__d6361c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stocktransfer",
            index=models.Index(
                fields=["tenant", "to_warehouse", "status"],
                name="inventory_s_tenant__7fbbde_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocktransfer",
            constraint=models.UniqueConstraint(
                fields=("tenant", "transfer_number"),
                name="unique_tenant_transfer_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservationitem",
            index=models.Index(
                fields=["tenant", "reservation"], name="inventory_s_tenant__37e437_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservationitem",
            index=models.Index(
                fields=["tenant", "stock_item", "status"],
                name="inventory_s_tenant__cb2ec7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservationitem",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_s_tenant__df280c_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockreservationitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "reservation", "line_number"),
                name="unique_reservation_line_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservation",
            index=models.Index(
                fields=["tenant", "status", "expiry_date"],
                name="inventory_s_tenant__401bf6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservation",
            index=models.Index(
                fields=["tenant", "reservation_type", "status"],
                name="inventory_s_tenant__3c089d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreservation",
            index=models.Index(
                fields=["tenant", "reference_type", "reference_id"],
                name="inventory_s_tenant__e3fd0e_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockreservation",
            constraint=models.UniqueConstraint(
                fields=("tenant", "reservation_number"),
                name="unique_tenant_reservation_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreceiptitem",
            index=models.Index(
                fields=["tenant", "receipt"], name="inventory_s_tenant__e88573_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stockreceiptitem",
            index=models.Index(
                fields=["tenant", "product", "quality_status"],
                name="inventory_s_tenant__469163_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockreceiptitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "receipt", "line_number"),
                name="unique_receipt_line_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreceipt",
            index=models.Index(
                fields=["tenant", "status", "-receipt_date"],
                name="inventory_s_tenant__734deb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreceipt",
            index=models.Index(
                fields=["tenant", "warehouse", "status"],
                name="inventory_s_tenant__acb3b0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockreceipt",
            index=models.Index(
                fields=["tenant", "supplier", "status"],
                name="inventory_s_tenant__51de5b_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockreceipt",
            constraint=models.UniqueConstraint(
                fields=("tenant", "receipt_number"), name="unique_tenant_receipt_number"
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "stock_item", "-movement_date"],
                name="inventory_s_tenant__072f9b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "movement_type", "-movement_date"],
                name="inventory_s_tenant__be5287_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "movement_reason", "-movement_date"],
                name="inventory_s_tenant__9f619d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "reference_type", "reference_id"],
                name="inventory_s_tenant__638aff_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "performed_by", "-movement_date"],
                name="inventory_s_tenant__8a700b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "-movement_date"],
                name="inventory_s_tenant__d4c902_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stocklocation",
            index=models.Index(
                fields=["tenant", "warehouse", "is_active"],
                name="inventory_s_tenant__173d5a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stocklocation",
            index=models.Index(
                fields=["tenant", "warehouse", "location_type"],
                name="inventory_s_tenant__599796_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stocklocation",
            constraint=models.UniqueConstraint(
                fields=("tenant", "warehouse", "code"),
                name="unique_tenant_location_code",
            ),
        ),
        migrations.AddIndex(
            model_name="stockitem",
            index=models.Index(
                fields=["tenant", "product", "warehouse"],
                name="inventory_s_tenant__c95e5c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockitem",
            index=models.Index(
                fields=["tenant", "warehouse", "quantity_available"],
                name="inventory_s_tenant__8cd84f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockitem",
            index=models.Index(
                fields=["tenant", "abc_classification"],
                name="inventory_s_tenant__2f1109_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockitem",
            index=models.Index(
                fields=["tenant", "next_count_due"],
                name="inventory_s_tenant__5d98ff_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockitem",
            index=models.Index(
                fields=["tenant", "is_quarantined"],
                name="inventory_s_tenant__4982bc_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockitem",
            constraint=models.UniqueConstraint(
                fields=(
                    "tenant",
                    "product",
                    "variation",
                    "warehouse",
                    "location",
                    "batch",
                ),
                name="unique_stock_item_location",
            ),
        ),
        migrations.AddIndex(
            model_name="stockadjustmentitem",
            index=models.Index(
                fields=["tenant", "adjustment"], name="inventory_s_tenant__1d9b1a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stockadjustmentitem",
            index=models.Index(
                fields=["tenant", "stock_item"], name="inventory_s_tenant__9dd81c_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="stockadjustmentitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "adjustment", "line_number"),
                name="unique_adjustment_line_number",
            ),
        ),
        migrations.AddIndex(
            model_name="stockadjustment",
            index=models.Index(
                fields=["tenant", "warehouse", "status"],
                name="inventory_s_tenant__26b2f3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockadjustment",
            index=models.Index(
                fields=["tenant", "adjustment_type", "status"],
                name="inventory_s_tenant__327df0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockadjustment",
            index=models.Index(
                fields=["tenant", "status", "adjustment_date"],
                name="inventory_s_tenant__a60858_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="stockadjustment",
            constraint=models.UniqueConstraint(
                fields=("tenant", "adjustment_number"),
                name="unique_tenant_adjustment_number",
            ),
        ),
        migrations.AddIndex(
            model_name="serialnumber",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_s_tenant__3d7ffe_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serialnumber",
            index=models.Index(
                fields=["tenant", "serial_number"],
                name="inventory_s_tenant__ddfdd6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serialnumber",
            index=models.Index(
                fields=["tenant", "status"], name="inventory_s_tenant__da33fa_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="serialnumber",
            constraint=models.UniqueConstraint(
                fields=("tenant", "product", "serial_number"),
                name="unique_tenant_product_serial",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorderitem",
            index=models.Index(
                fields=["tenant", "purchase_order"],
                name="inventory_p_tenant__d6551b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorderitem",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_p_tenant__44f7b7_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="purchaseorderitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "purchase_order", "line_number"),
                name="unique_po_line_number",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["tenant", "supplier", "status"],
                name="inventory_p_tenant__5ea308_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["tenant", "status", "order_date"],
                name="inventory_p_tenant__f75176_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseorder",
            index=models.Index(
                fields=["tenant", "buyer", "status"],
                name="inventory_p_tenant__29459f_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="purchaseorder",
            constraint=models.UniqueConstraint(
                fields=("tenant", "po_number"), name="unique_tenant_po_number"
            ),
        ),
        migrations.AddIndex(
            model_name="productvariation",
            index=models.Index(
                fields=["tenant", "product", "is_active"],
                name="inventory_p_tenant__86baa2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productvariation",
            index=models.Index(
                fields=["tenant", "sku"], name="inventory_p_tenant__0f1c72_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productvariation",
            index=models.Index(
                fields=["tenant", "barcode"], name="inventory_p_tenant__d4feaf_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="productvariation",
            constraint=models.UniqueConstraint(
                fields=("tenant", "product", "variation_code"),
                name="unique_tenant_variation_code",
            ),
        ),
        migrations.AddConstraint(
            model_name="productvariation",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("sku__isnull", False), models.Q(("sku", ""), _negated=True)
                ),
                fields=("tenant", "sku"),
                name="unique_tenant_variation_sku",
            ),
        ),
        migrations.AddConstraint(
            model_name="productvariation",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("barcode__isnull", False), models.Q(("barcode", ""), _negated=True)
                ),
                fields=("tenant", "barcode"),
                name="unique_tenant_variation_barcode",
            ),
        ),
        migrations.AddIndex(
            model_name="productsupplier",
            index=models.Index(
                fields=["tenant", "product", "is_active"],
                name="inventory_p_tenant__1a4c42_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productsupplier",
            index=models.Index(
                fields=["tenant", "supplier", "is_active"],
                name="inventory_p_tenant__c0ac7a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="productsupplier",
            index=models.Index(
                fields=["tenant", "is_preferred"], name="inventory_p_tenant__1ea9a6_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="productsupplier",
            constraint=models.UniqueConstraint(
                fields=("tenant", "product", "supplier"),
                name="unique_tenant_product_supplier",
            ),
        ),
        migrations.AddIndex(
            model_name="productattributevalue",
            index=models.Index(
                fields=["tenant", "product"], name="inventory_p_tenant__583228_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productattributevalue",
            index=models.Index(
                fields=["tenant", "attribute"], name="inventory_p_tenant__7949ae_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="productattributevalue",
            constraint=models.UniqueConstraint(
                fields=("tenant", "product", "attribute"),
                name="unique_tenant_product_attribute",
            ),
        ),
        migrations.AddIndex(
            model_name="productattribute",
            index=models.Index(
                fields=["tenant", "is_active"], name="inventory_p_tenant__585911_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productattribute",
            index=models.Index(
                fields=["tenant", "attribute_type"],
                name="inventory_p_tenant__d4002e_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="productattribute",
            constraint=models.UniqueConstraint(
                fields=("tenant", "slug"), name="unique_tenant_attribute_slug"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "sku"], name="inventory_p_tenant__f76b06_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "barcode"], name="inventory_p_tenant__86b3c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "status", "is_saleable"],
                name="inventory_p_tenant__4d4ae1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "category", "status"],
                name="inventory_p_tenant__2074e8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "brand", "status"],
                name="inventory_p_tenant__a52f73_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "product_type"], name="inventory_p_tenant__30abb2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "abc_classification"],
                name="inventory_p_tenant__b676b0_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.UniqueConstraint(
                fields=("tenant", "sku"), name="unique_tenant_product_sku"
            ),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("barcode__isnull", False), models.Q(("barcode", ""), _negated=True)
                ),
                fields=("tenant", "barcode"),
                name="unique_tenant_product_barcode",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryreport",
            index=models.Index(
                fields=["tenant", "report_type", "status"],
                name="inventory_r_tenant__b6f346_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryreport",
            index=models.Index(
                fields=["tenant", "generated_by", "-generated_at"],
                name="inventory_r_tenant__e6fca0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryreport",
            index=models.Index(
                fields=["tenant", "is_scheduled", "next_run"],
                name="inventory_r_tenant__1ae3b4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "status", "-created_at"],
                name="inventory_a_tenant__10041c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "alert_type", "status"],
                name="inventory_a_tenant__fd674f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "severity", "status"],
                name="inventory_a_tenant__855421_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_a_tenant__c6e9e7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "warehouse", "status"],
                name="inventory_a_tenant__1640ec_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="inventoryalert",
            index=models.Index(
                fields=["tenant", "assigned_to", "status"],
                name="inventory_a_tenant__bd200e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["tenant", "code"], name="inventory_d_tenant__2e8a71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["tenant", "is_active"], name="inventory_d_tenant__d6c6ec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="department",
            index=models.Index(
                fields=["tenant", "parent"], name="inventory_d_tenant__c2c1de_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="department",
            constraint=models.UniqueConstraint(
                fields=("tenant", "code"), name="unique_tenant_dept_code"
            ),
        ),
        migrations.AddIndex(
            model_name="cyclecountitem",
            index=models.Index(
                fields=["tenant", "cycle_count"], name="inventory_c_tenant__b66c1c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cyclecountitem",
            index=models.Index(
                fields=["tenant", "variance_status"],
                name="inventory_c_tenant__fd035b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cyclecountitem",
            index=models.Index(
                fields=["tenant", "counted_by"], name="inventory_c_tenant__fd2aa2_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="cyclecountitem",
            constraint=models.UniqueConstraint(
                fields=("tenant", "cycle_count", "stock_item", "location"),
                name="unique_count_stock_item",
            ),
        ),
        migrations.AddIndex(
            model_name="cyclecount",
            index=models.Index(
                fields=["tenant", "warehouse", "status"],
                name="inventory_c_tenant__076377_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cyclecount",
            index=models.Index(
                fields=["tenant", "status", "scheduled_date"],
                name="inventory_c_tenant__1a650f_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="cyclecount",
            constraint=models.UniqueConstraint(
                fields=("tenant", "count_number"), name="unique_tenant_count_number"
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["tenant", "department", "is_active"],
                name="inventory_c_tenant__00f4f9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["tenant", "parent"], name="inventory_c_tenant__70de18_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("tenant", "department", "code"), name="unique_tenant_cat_code"
            ),
        ),
        migrations.AddIndex(
            model_name="brand",
            index=models.Index(
                fields=["tenant", "code"], name="inventory_b_tenant__2a6727_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="brand",
            index=models.Index(
                fields=["tenant", "is_active"], name="inventory_b_tenant__650c77_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="brand",
            constraint=models.UniqueConstraint(
                fields=("tenant", "code"), name="unique_tenant_brand_code"
            ),
        ),
        migrations.AddIndex(
            model_name="batch",
            index=models.Index(
                fields=["tenant", "product", "status"],
                name="inventory_b_tenant__af263b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="batch",
            index=models.Index(
                fields=["tenant", "expiry_date"], name="inventory_b_tenant__535b2f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batch",
            index=models.Index(
                fields=["tenant", "status"], name="inventory_b_tenant__d871b2_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="batch",
            constraint=models.UniqueConstraint(
                fields=("tenant", "product", "batch_number"),
                name="unique_tenant_product_batch",
            ),
        ),
        migrations.AddIndex(
            model_name="attributevalue",
            index=models.Index(
                fields=["tenant", "attribute", "is_active"],
                name="inventory_a_tenant__a4d1a4_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="attributevalue",
            constraint=models.UniqueConstraint(
                fields=("tenant", "attribute", "value"),
                name="unique_tenant_attribute_value",
            ),
        ),
    ]
